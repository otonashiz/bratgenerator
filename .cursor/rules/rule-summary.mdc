---
description:
globs:
alwaysApply: false
---
# Cursor Rules Summary & Usage Guide

## 📋 Rules Overview
This project uses 5 comprehensive Cursor Rules to ensure consistent, high-quality development:

### 1. [Project Overview](mdc:.cursor/rules/project-overview.mdc)
- **Purpose**: Core project understanding and principles
- **Key Content**: Product description, target audience, success metrics
- **Use When**: Starting any new feature or getting familiar with the project

### 2. [Technical Stack](mdc:.cursor/rules/tech-stack.mdc) 
- **Purpose**: Technology decisions and architecture constraints
- **Key Content**: Required technologies, folder structure, banned patterns
- **Use When**: Setting up project structure or choosing implementation approaches

### 3. [Design System](mdc:.cursor/rules/design-system.mdc)
- **Purpose**: UI/UX standards and brand consistency
- **Key Content**: Color palette, layout rules, component standards
- **Use When**: Creating or modifying any user interface elements

### 4. [Canvas Implementation](mdc:.cursor/rules/canvas-implementation.mdc)
- **Purpose**: Detailed Canvas API usage and image generation
- **Key Content**: Rendering algorithms, performance optimization, error handling
- **Use When**: Working on the core image generation functionality

### 5. [SEO Optimization](mdc:.cursor/rules/seo-optimization.mdc)
- **Purpose**: Search engine optimization and content strategy
- **Key Content**: Keyword targeting, metadata configuration, performance requirements
- **Use When**: Implementing SEO features or content sections

### 6. [Development Workflow](mdc:.cursor/rules/development-workflow.mdc)
- **Purpose**: Development process and quality standards
- **Key Content**: Code patterns, testing requirements, deployment standards
- **Use When**: Writing code, reviewing work, or preparing for deployment

## 🎯 Rule Enforcement Priority

### Critical (🔴 Must Follow)
1. **Technical Stack** - Technology choices are non-negotiable
2. **Canvas Implementation** - Core functionality requirements
3. **Design System** - Brand accuracy is essential for success

### High Priority (🟡 Strongly Recommended)
4. **SEO Optimization** - Required for business success
5. **Development Workflow** - Quality and maintainability

### Reference (🟢 Guidelines)
6. **Project Overview** - Context and understanding

## 🚀 Quick Reference for Common Tasks

### Starting a New Feature
1. Check [Project Overview](mdc:.cursor/rules/project-overview.mdc) for context
2. Review [Technical Stack](mdc:.cursor/rules/tech-stack.mdc) for folder structure
3. Follow [Development Workflow](mdc:.cursor/rules/development-workflow.mdc) patterns
4. Apply [Design System](mdc:.cursor/rules/design-system.mdc) standards

### Working on Canvas/Image Generation
1. **Required Reading**: [Canvas Implementation](mdc:.cursor/rules/canvas-implementation.mdc)
2. Use exact algorithms and patterns specified
3. Follow performance optimization guidelines
4. Implement comprehensive error handling

### Building UI Components  
1. **Required Reading**: [Design System](mdc:.cursor/rules/design-system.mdc)
2. Use exact color values and typography
3. Ensure mobile-first responsive design
4. Implement proper accessibility features

### SEO Implementation
1. **Required Reading**: [SEO Optimization](mdc:.cursor/rules/seo-optimization.mdc) 
2. Use exact metadata configurations
3. Implement structured data
4. Follow content strategy guidelines

### Code Quality & Deployment
1. **Required Reading**: [Development Workflow](mdc:.cursor/rules/development-workflow.mdc)
2. Follow file naming conventions
3. Use required code structure patterns
4. Complete all checklists before deployment

## ⚠️ Critical Success Factors

### Non-Negotiable Requirements
```typescript
// These requirements CANNOT be compromised:
const CRITICAL_REQUIREMENTS = {
  colors: '#BEFF34', // Exact Brat green
  font: 'Arial Narrow', // Exact font match
  framework: 'Next.js 14+ App Router', // No alternatives
  styling: 'Tailwind CSS', // No CSS-in-JS
  performance: 'Core Web Vitals >90', // SEO requirement
  mobile: 'Mobile-first design', // Primary audience
  accessibility: 'WCAG AA compliance', // Legal requirement
  canvas: 'Native Canvas API only' // No third-party libraries
} as const;
```

### Quality Gates
```bash
# Before any code submission:
□ All rules compliance verified
□ Mobile responsive design tested
□ Canvas functionality working
□ Performance targets met
□ SEO metadata implemented
□ Accessibility guidelines followed
□ Error handling in place
□ TypeScript compilation successful
```

## 🛠️ Development Workflow Integration

### Phase 1: Project Setup (Current)
- **Primary Rules**: [Technical Stack](mdc:.cursor/rules/tech-stack.mdc), [Development Workflow](mdc:.cursor/rules/development-workflow.mdc)
- **Focus**: Project structure, basic components, Canvas foundation

### Phase 2: Core Features (Next)
- **Primary Rules**: [Canvas Implementation](mdc:.cursor/rules/canvas-implementation.mdc), [Design System](mdc:.cursor/rules/design-system.mdc)
- **Focus**: Real-time rendering, scribble effects, responsive UI

### Phase 3: Optimization (Later)
- **Primary Rules**: [Development Workflow](mdc:.cursor/rules/development-workflow.mdc), [SEO Optimization](mdc:.cursor/rules/seo-optimization.mdc)
- **Focus**: Performance tuning, cross-browser testing

### Phase 4: Launch Preparation (Final)
- **Primary Rules**: [SEO Optimization](mdc:.cursor/rules/seo-optimization.mdc), [Development Workflow](mdc:.cursor/rules/development-workflow.mdc)
- **Focus**: SEO implementation, analytics, production deployment

## 📖 Rule Updates & Maintenance

### When to Update Rules
- Product requirements change
- New technical insights discovered
- Performance benchmarks adjusted
- SEO strategy evolves

### How to Update Rules
1. Modify the specific `.mdc` file in `.cursor/rules/`
2. Update this summary if new rules are added
3. Communicate changes to all team members
4. Update project documentation accordingly

## 🎯 Success Metrics Alignment

### Business Goals ↔ Rules Mapping
- **SEO Rankings** ← [SEO Optimization](mdc:.cursor/rules/seo-optimization.mdc)
- **User Experience** ← [Design System](mdc:.cursor/rules/design-system.mdc)
- **Performance** ← [Canvas Implementation](mdc:.cursor/rules/canvas-implementation.mdc)
- **Code Quality** ← [Development Workflow](mdc:.cursor/rules/development-workflow.mdc)
- **Technical Reliability** ← [Technical Stack](mdc:.cursor/rules/tech-stack.mdc)

## 🚨 Emergency Protocols

### If Rules Conflict
1. **Priority Order**: Critical > High Priority > Reference
2. **Business Impact**: SEO and Performance requirements take precedence
3. **User Experience**: Mobile experience is more important than desktop
4. **Technical Debt**: Follow rules strictly to avoid shortcuts

### If Rules Are Unclear
1. Reference the source documents mentioned in each rule
2. Check [04_implement_plan.md](mdc:04_implement_plan.md) for context
3. Ask for clarification rather than assuming
4. Document decisions for future reference

## 💡 Best Practices for Rule Usage

### Before Starting Work
1. Read relevant rules thoroughly
2. Understand the "why" behind each requirement  
3. Plan implementation approach
4. Identify potential conflicts early

### During Development
1. Reference rules frequently
2. Use code examples as templates
3. Validate against checklists regularly
4. Test on mobile devices constantly

### Before Completion
1. Complete all applicable checklists
2. Verify compliance with all relevant rules
3. Test edge cases and error scenarios
4. Ensure accessibility and SEO requirements met

---

**Remember**: These rules exist to ensure project success. Following them strictly will result in a high-quality, performant, SEO-optimized Brat Generator that ranks well in search results and provides an excellent user experience.
